package com.mooder.filters;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;

import javax.annotation.security.PermitAll;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.ext.Provider;

import org.jboss.resteasy.core.Headers;
import org.jboss.resteasy.core.ResourceMethodInvoker;
import org.jboss.resteasy.core.ServerResponse;
import org.jboss.resteasy.util.Base64;

import com.mooder.SessionResource;
import com.mooder.security.MySecurityContext;

@Provider
public class SecurityContextFilter implements ContainerRequestFilter   {

	public class Credentials {
		public String user;
		public String password;
		
		@Override
		public String toString() {
			return "User: " + user + ", password: " + password;
		}
	}
	
	private static final String 		AUTHORITATION_HEADER 	= "Authorization";
	private static final String 		AUTHORITATION_SCHEME 	= "[Bb]asic"; 
	private static final ServerResponse ACCESS_DENIED 			= new ServerResponse("Access denied", 401, new Headers<Object>());
	private static final ServerResponse BAD_REQUEST 			= new ServerResponse("The request cannot be fulfilled due to bad syntax", 400, new Headers<Object>());

	@Override
	public void filter(ContainerRequestContext request) throws IOException {
		
		ResourceMethodInvoker methodInvoker = (ResourceMethodInvoker) request.getProperty("org.jboss.resteasy.core.ResourceMethodInvoker");
        Method method = methodInvoker.getMethod();
          
        /*
         * If trying to get a sessionID, must authenticate with BASIC scheme
         */
		if( method.getDeclaringClass().equals( SessionResource.class)) {
			/*
			 * Look for BASIC_AUTH
			 */
			
			List<String> authoritation = null;
			
			if( (authoritation = request.getHeaders( ).get( AUTHORITATION_HEADER)) == null || authoritation.isEmpty())
				request.abortWith( ACCESS_DENIED)
			;else {
				/*
				 * Extract credentiasl from header
				 */
				Credentials credentials = new Credentials();
				
				ServerResponse response = getUserCredentials( authoritation.get( 0), credentials);
				
				System.out.println( "Credenciales: " + credentials);
				
				if( response != null) {
					request.abortWith( response);
				}
			}
		}else {
			/*
			 * Get authoritation level needed in the resource
			 */
			/*
			 * If everyone is allowed in the resource, exit
			 */
			if( !method.isAnnotationPresent( PermitAll.class)) {
				
			}
			
			System.out.println( "Perfecto, logueado");
		}
		
		request.setSecurityContext( new MySecurityContext());
		
	}
	
	private ServerResponse getUserCredentials( String authHeader, Credentials credentials) 
	{
		ServerResponse serverResponse = null;
		String encodedUserPassword = null;
		
		try {
			encodedUserPassword = authHeader.split( AUTHORITATION_SCHEME + " ")[ 1];
		}catch ( ArrayIndexOutOfBoundsException e) {
			serverResponse = BAD_REQUEST;
		}
		
		if( encodedUserPassword != null) {
		
			String userPassword = null;
			
			try {
				userPassword = new String( Base64.decode( encodedUserPassword));
			} catch( Exception e) {
				serverResponse = BAD_REQUEST;
			}
			
			if( userPassword.split( ":").length > 1 ) {
				String user 	= userPassword.split( ":")[ 0];
				String password = userPassword.split( ":")[ 1];
				
				credentials.user = user;
				credentials.password = password;
				
			}else {
				serverResponse = BAD_REQUEST;
			}
			
		}
		return serverResponse;
	}




}
